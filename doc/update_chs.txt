------------------------------------------------------------------

Rush v0.15 alpha :

1.初步支持完全类型推导，结合静态类型的效率和动态类型的灵活

------------------------------------------------------------------

Rush v0.14 alpha :

1.删除IDA和emscripten
2.增加文档

------------------------------------------------------------------

Rush v0.13 alpha :

1.增加C前端，可用IDA将EXE翻译C，然后再将C翻译为Rush，再将Rush翻译为JS。（目前仅支持简单代码）

------------------------------------------------------------------

Rush v0.12 alpha :

1.增加C++后端，将Rush代码翻译为ASM再翻译为C++。
2.支持局部变量数组（类似C）。

------------------------------------------------------------------

Rush v0.11 alpha :

1.增加JS后端，可将Rush代码翻译为JS（不需要emscripten）。

------------------------------------------------------------------

Rush v0.1 :

1.优化临时变量析构函数生成，较大提高运行性能。
2.精确定位行号。
3.初步支持Mac OS和Ubuntu。
4.RPP改名为Rush，版本号重置。

------------------------------------------------------------------

RPP v1.97 alpha :

1.支持自举。
2.&&和||运算符与C++兼容。
3.增加G++后端，可将RPP翻译为C++。
4.初步支持ios和android。
5.初步支持x64和arm64。
6.初步支持HTML5，可将RPP翻译为JS运行，或者在线解释运行RPP源码。
7.增加类似python的冒号定义语法。

------------------------------------------------------------------

RPP v1.93 :

1.完全支持宏，具有和Lisp宏一样强大的表达能力。
2.JIT支持编译期计算。

------------------------------------------------------------------

RPP v1.92 :

1.JIT完全支持call_by_name、call_by_need和call_by_value。
2.支持以惰性求值实现的短路求值。
3.C++对象和RPP对象同一化。
4.增加OpenGL示例。

------------------------------------------------------------------

RPP v1.91 alpha :

1.嵌入编译器只需要包含一个头文件（zmain.h）。
2.字符串优化，编译速度有较大提升。
3.JIT元编程和反射支持。
4.JIT支持call_by_name、call_by_need和call_by_value（不完全）。
5.简单并行计算支持。
6.解释模式删除元编程。
7.增加关键字cfunc，定义函数时加上此关键字将自动保护ebx、esi、edi。
8.S表达式改为用逗号分隔。
9.bug修复。

------------------------------------------------------------------

RPP v1.9 fix7 :

1.修复move bug。

------------------------------------------------------------------

RPP v1.9 :

1.继续优化，编译速度提高7.8%。

------------------------------------------------------------------

RPP v1.89 fix2 :

1.调整结构体成员顺序，编译速度提高3.5%。

------------------------------------------------------------------

RPP v1.89 :

1.继续move优化，编译速度实测又提高了7.5%。

------------------------------------------------------------------

RPP v1.88 fix4 :

1.大幅修改源码，使源码结构更清晰。
2.使用C++11的move语义，优化词法分析，编译速度实测提高20%。
3.JIT打包生成的EXE优化到637KB，加个压缩壳可以压到200K。

------------------------------------------------------------------

RPP v1.87 :

1.支持超级宏。
2.修复bug。

------------------------------------------------------------------

RPP v1.86 gamma :

1.增加JIT打包模式，打包生成EXE可以脱离RPP环境运行。
2.增加windows窗体模式（即WinMain），可开发windows窗口程序。
3.数组初始化更方便。
4.调用外部API更方便，如 stdcall["MessageBoxA",0,"abc","123",0] 可简写为 @MessageBoxA(0,"abc","123",0)。

------------------------------------------------------------------

RPP v1.86 alpha :

1.全新JIT引擎，极致的编译和运行速度。 
2.精简Lisp内核，无限的动态扩展能力。 
3.完全开源，真正的开源不需要协议。
4.集成IDE，编辑、编译、运行一体化，支持代码自动完成。
5.暂时移除惰性求值。
6.暂时移除JS和动态类型。
7.暂时移除cocos2dx。

------------------------------------------------------------------

RPP v1.83 :

1.编译运行速度约为C++的1/3。

------------------------------------------------------------------

RPP v1.82 alpha :

1.开启汇编级内联优化，性能又提升了31%，目前编译运行速度是C++的1/5，解释运行是C++的1/139。
2.R++改名为RPP。

------------------------------------------------------------------

R++ v1.81 :

1.性能提高了31%，目前编译运行速度是C++的1/7，解释运行是C++的1/139。

------------------------------------------------------------------

R++ v1.8 :

1.修复bug。
2.支持惰性求值。

------------------------------------------------------------------

R++ v1.71 :

1.优化运行速度。

------------------------------------------------------------------

R++ v1.7 :

1.支持无操作系统裸奔。
2.支持编译成机器码。
3.支持cocos2dx绑定（win32、android）。
4.支持闭包。
5.支持python的无花括号风格。

------------------------------------------------------------------

R++ v1.5 :

1.使用PJIT(Pseudocode Just-In-Time)，编译速度大幅提高，但运行效率远远不如C++。
2.强大的元编程支持，元函数可以直接访问实函数的变量。
3.完整的反射和自省机制，解释器和R++代码几乎融为一体。
4.字符串常量统一使用utf8。（如果需要在控制台输出中文请参考rpp.pdf修改控制台的编码）
5.完整的模板函数支持，模板函数不仅可以作为类的成员，还可以动态生成。
6.可变参数支持。
7.内部列表多改为红黑树，动态调用效率大幅提高。
8.方便的调用外部DLL接口。（R++所有数据类型和C/C++二进制兼容）
9.暂不支持跨平台和生成机器码。

------------------------------------------------------------------

R++ v1.1 :

1.更彻底的类型推断，C++11需要使用关键字auto，R++可以省略auto。
2.语句后面的分号是可选的。
3.宏自动加括号，也不需要写折行符号。
4.空参函数的括号是可选的。
5.可以自定义新的运算符，也可以自定义运算符的优先级。
6.更简洁的模板写法。
7.更简单的函数指针语法，函数指针不需要声明。
8.默认参数更灵活，默认参数可以访问到前面的参数，也可以访问到类的数据成员。
9.Lisp的S表达式和C++的中缀表达式可以混合使用，也为C++增加了一些动态特性。
10.支持mixin，可以递归引用，不需要向前声明。
11.无缝内联汇编，不需要关键字asm，寄存器几乎可以当做一个整型变量使用。
12.程序员可以随意DIY，可以认为R++没有内置数据类型，int也是程序员自定义的。
13.R++既可以编译运行又可以解释运行，静态类型和动态类型都可以使用。
14.自动处理重复包含问题，R++没有.CPP文件，只有.H文件。

------------------------------------------------------------------
