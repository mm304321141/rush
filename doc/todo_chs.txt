
------------------------------------------------------------------

未完成：

解释模式的64位支持

64位指令优化

ASM->JS 后端完善

ASM->C++ 后端完善

Lisp内联优化

Linux支持完善

IOS、Android支持完善

增加类似Lua和Ruby的语法

恢复动态调用函数

恢复opengl支持

FFI支持（包括64位）

ARM的JIT支持

IDE完善，需支持代码补全、断点、单步调试

翻译并更新RPP文档

无限深度递归支持，类似Go

双层构造转换 tmac("rs") -> tmac(rstr("rs"))

结构体成员数组应变为指针

sizeof需支持表达式

全局变量中产生临时变量需要处理

完全类型推导，函数参数不用写类型

r_char('a')的等价用法RC'a'或R'a'

switch优化

带参数宏完善，应与C++保持兼容

应支持生成中间码文件，载入中间码文件运行

JS后端等模块进行move优化

不使用nasm独立生成EXE，加速自举

将qemu纳入扩展工具集

浮点运算优化

恢复 1.print 语法支持

除了JIT其它运行模式也应支持lisp宏

恢复类嵌套支持

完善局部变量引用处理，引用应该与C++保持兼容

不同类型指针重载规则应该C++一致

多重指针类型推断支持

添加Travis CI自动测试

S表达式去掉逗号

64位元编程

恢复裸奔支持

进一步兼容JS语法

Lisp直接JIT以提高性能

JS和原生代码互相无缝调用

------------------------------------------------------------------

已完成：

NASM、JIT的64位支持

恢复动态类型支持

------------------------------------------------------------------
